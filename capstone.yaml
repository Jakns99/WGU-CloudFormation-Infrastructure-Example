AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for CloudNet Technologies Capstone Project - Example Infrastructure

Parameters:
  ProjectName:
    Type: String
    Default: msp-deployment
    Description: Project ID for resource names

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the Public Subnet
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the Second Public Subnet

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.101.0/24
    Description: CIDR block for the Private Subnet
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.102.0/24
    Description: CIDR block for the Second Private Subnet

  InstanceType:
    Type: String
    Default: t3.large
    Description: EC2 Instance Type for Server Deployment

  DesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired number of EC2 instances in the Auto Scaling Group

  MaxSize:
    Type: Number
    Default: 5
    Description: Maximum number of EC2 instances in the Auto Scaling Group

  DBInstanceClass:
    Type: String
    Default: db.t3.large
    Description: RDS Instance Class

  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated Storage Size (in GB) for RDS Instance

  DBName:
    Type: String
    Default: mspdb
    Description: Name of the RDS Database

  DBUsername:
    Type: String
    Default: admin
    Description: Master Username for the RDS Database

  DBPasswordSecretName:
    Type: String
    Description: "Name of Secrets Manager secret that stores DB password (SecretString key 'password')"
    StorageEncrypted: true

  LatestAmi:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Mappings:
  AWSRegiontoAZs:
    us-east-1:
      AZ1: us-east-1a
      AZ2: us-east-1b
    us-west-1:
      AZ1: us-west-1a
      AZ2: us-west-1b
    eu-west-1:
      AZ1: eu-west-1a
      AZ2: eu-west-1b

Resources:
  # Networking #
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets #
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-public-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-public-2"

  # Private Subnets #
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-private-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-private-2"
  # Route Tables for Public Subnets #
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway #
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-nat-eip"

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicSubnet1
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-natgw"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups #
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS traffic from the internet to ALB
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-alb-sg"

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to app servers
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-app-sg"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow only app servers to access the database
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref AppSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-db-sg"

  # IAM Role and Instance Profile for EC2 (SSM) #
  EC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ec2-ssm-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2SSMRole
      InstanceProfileName: !Sub "${ProjectName}-ec2-profile"

  # Launch Template #
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-launch-template"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
        - !Ref AppSecurityGroup
        ImageId: !Ref LatestAmi
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd
            systemctl enable httpd
            systemctl start httpd
            echo "<h1>${ProjectName} - app server</h1>" > /var/www/html/index.html

  # Application Load Balancer #
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-alb"
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-alb"

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-tg"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref vpc
      TargetType: instance
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AppTargetGroup

  # Auto Scaling Group #
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${ProjectName}-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      TargetGroupARNs:
      - !Ref AppTargetGroup
      HealthCheckType: ELB
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-app-server"
        PropagateAtLaunch: true

  # RDS MySQL Database Instance #
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${ProjectName} RDS Subnet Group"
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      DBSubnetGroupName: !Sub "${ProjectName}-rds-subnet-group"
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-rds-subnet-group"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectName}-db"
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: "8.0"
      DBName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DBPasswordSecretName}:SecretString:password}}"
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
      - !GetAtt DBSecurityGroup.GroupId
      PubliclyAccessible: false
      MultiAZ: false
      DeletionProtection: false
      BackupRetentionPeriod: 7
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-rds"

  # S3 Bucket # 
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-assets-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      Tags:
      - Key: Name
        Value: !Sub "${ProjectName}-assets-bucket"

  # CloudWatch Alarm #
  HighCpuAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-high-cpu"
      AlarmDescription: "Alarm if average CPU > 70% for AutoScalingGroup instances"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AppAutoScalingGroup
      TreatMissingData: notBreaching

Outputs:
  ALBDNSName:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt AppLoadBalancer.DNSName

  VpcId:
    Description: "VPC ID"
    Value: !Ref Vpc

  RDSEndpoint:
    Description: "RDS Endpoint Address"
    Value: !GetAtt RDSInstance.Endpoint.Address

  AssetsBucketName:
    Description: "S3 Assets Bucket Name"
    Value: !Ref AssetsBucket

